package project;
import java.util.ArrayList;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class FullAssembler1 implements Assembler {
	Instruction opcodes;
	int retVal;
	//clears the empty elements off the back end of list 
	private ArrayList<String> clearList(ArrayList<String> arr) {
		
		if(!arr.get(arr.size()-1).trim().isEmpty()) {
			return arr;
		}
		arr.remove(arr.size()-1);
		return clearList(arr);
	}
	

	@Override
	public int assemble(String inputFileName, String outputFileName, StringBuilder error) {
		if(error == null) throw new IllegalArgumentException("Coding error: the error buffer is null");
		boolean readingCode = true;
		ArrayList<String> list = new ArrayList<>();
		//creates arraylist of things we need to read for errors
		try {
			Scanner s = new Scanner(new File(inputFileName));
			while(s.hasNextLine()) {
				list.add(s.nextLine());			
			}
			s.close();			
			list = clearList(list);
			for(int i =0; i<list.size();i++) {
				if(list.get(i).trim().isEmpty()) {
					error.append("\nIllegal blank entry in the source file");
					
					return i+1;
				}
				if(list.get(i).trim().length()==0 && i!= list.size()-1) {
					error.append("\nIllegal blank line in the source file");
					return i+1;
				}
				if(list.get(i).charAt(0) == ' ' || list.get(i).charAt(0)=='\t' ) {
					error.append("\nLine starts with illegal white space");
					return i +1;
				}
				if(list.get(i).trim().toUpperCase().equals("DATA")) {
					if(!list.get(i).trim().equals("DATA")) {
						error.append("\nLine does not have DATA in upper case");
						return i+1;}
					}
				if(list.get(i).trim().toUpperCase().equals("DATA") && readingCode ==false) {
					error.append("\nCannot hava DATA entered more than once throughout the input");
					return i+1;
				}
				if(list.get(i).trim().toUpperCase().equals("DATA") && readingCode ==true) {
					readingCode = false;
					continue;
				}
				
				
				String[] parts = list.get(i).trim().split("\\s+");
				if(!Instruction.opcodes.containsKey(parts[0])){
					
					//see if it matches a hexidecimal 
					if(parts[0].matches("-?[0-9a-fA-F]+")) {
						if(parts[0].length()>=3) {
							error.append("\nError on line " + (i+1) + ": is not a hexidecimal√ü");
							return i+1;
							
						}
						continue;
					}
					
					error.append("\nError on line " + (i+1) + ": illegal mnemonic");
					return i+1;
				}
				
				//if found a correct nmuenic
				if(Instruction.opcodes.containsKey(parts[0])) {
					
					if(Assembler.noArgument.contains(parts[0])) {
						
						if(parts.length!=1) {
							error.append("\nError on line " + (i+1) + ": this mnemonic cannot take arguments");
							return i+1;
						}
					}
					else {
						if(parts.length!=2) {

							error.append("\nError on line " + (i+1) + ": this mnemonic is missing an argument");
							return i+1;
						}
					}
				}
				

				
				
				
				
				 
				
				
				
			}
			
			System.out.println(list);
		}catch(FileNotFoundException f) {
			error.append("\nUnable to open the source file");
			return -1;
		}
		catch(Exception f) {
			
		}
		
		
		
		
		
		// TODO Auto-generated method stub
		
		return retVal;
	}
	public static void main(String[] args) {
		StringBuilder build = new StringBuilder();
		FullAssembler ass = new FullAssembler();
		System.out.println(ass.assemble("factorial.pasm", "hello1", build));
		StringBuilder error = new StringBuilder();
		System.out.println("Enter the name of the file without extension: ");
		try (Scanner keyboard = new Scanner(System.in)) { 
			String filename = keyboard.nextLine();
			int i = new FullAssembler().assemble(filename + ".pasm", 
					filename + ".pexe", error);
			System.out.println("result = " + i);
			System.out.println(error.toString());
		}

	}
	
	

}
