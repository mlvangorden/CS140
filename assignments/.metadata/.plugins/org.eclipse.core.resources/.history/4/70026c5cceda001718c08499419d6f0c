package project;
import java.util.ArrayList;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

//I'm not sure why we would need to check if something is a hex number,
//	and then check if the address and value are numeric. Seems redundant...

//Okay, so there are mistakes in the test files...
//	10e.pasm : the DATA separator on line 18
//	11e.pasm : the memory address 7 12 before DATA on line 30
//	12e.pasm : the instruction JumP on line 9
//	12e.pasm : the memory address 7 7 before DATA on line 30
//	17e.pasm : the instruction STO E21 actually has a '\t' before the 1 on line 5
//	17e.pasm : the instruction JUMP is missing an argument on line 8
//	19e.pasm : the instruction JMPZ has too many arguments on line 11

public class FullAssembler implements Assembler {
	Instruction opcodes;
	//clears the empty elements off the back end of list 
	private ArrayList<String> clearList(ArrayList<String> arr) {

		if(!arr.get(arr.size()-1).trim().isEmpty()) {
			return arr;
		}
		arr.remove(arr.size()-1);
		return clearList(arr);
	}


	@Override
	public int assemble(String inputFileName, String outputFileName, StringBuilder error) {
		if(error == null) throw new IllegalArgumentException("Coding error: the error buffer is null");
		boolean readingCode = true;
		ArrayList<String> list = new ArrayList<>();
		//creates arraylist of things we need to read for errors
		try {
			Scanner s = new Scanner(new File(inputFileName));
			while(s.hasNextLine()) {
				list.add(s.nextLine());			
			}
			s.close();			
			list = clearList(list);
			for(int i = 0; i<list.size(); i++) {

				if(list.get(i).trim().isEmpty()) {
					error.append("\nError on line " + (i+1)+": illegal blank line in the source file");
					return i+1;
				}
				if(list.get(i).trim().length()==0 && i!= list.size()-1) {
					error.append("\nError on line " + (i+1)+": illegal blank line in the source file");
					return i+1;
				}
				if(list.get(i).charAt(0) == ' ' || list.get(i).charAt(0)=='\t' ) {
					error.append("\nError on line " + (i+1)+": line starts with illegal white space");
					return i +1;
				}
				if(list.get(i).trim().toUpperCase().equals("DATA")) {
					if(!list.get(i).trim().equals("DATA")) {
						error.append("\nError on line " + (i+1)+": Line does not have DATA in upper case");
						return i+1;}
				}
				if(list.get(i).trim().toUpperCase().equals("DATA") && readingCode ==false) {
					error.append("\nError on line "+(i+1)+": illegal second entry of DATA");
					return i+1;
				}
				if(list.get(i).trim().toUpperCase().equals("DATA") && readingCode ==true) {
					readingCode = false;
					continue;
				}


				String[] parts = list.get(i).trim().split("\\s+");

				//if found a correct mnemonic
				if(Instruction.opcodes.containsKey(parts[0])) {

					if(Assembler.noArgument.contains(parts[0])) {

						if(parts.length!=1) {
							error.append("\nError on line " + (i+1) + ": this mnemonic cannot take arguments");
							return i+1;
						}
					}
					else {
						if(parts.length<2) {
							error.append("\nError on line " + (i+1) + ": this mnemonic is missing an argument");
							return i+1;
						}
						if(parts.length>2) {
							error.append("\nError on line "+(i+1)+": this mnemonic has too many arguments");
							return i+1;
						}
					}
				}
				
				if(parts.length > 1) {
					if(parts[1].charAt(0) == '#' || parts[1].charAt(0) == '@' || parts[1].charAt(0) == '&') {
						parts[1] = parts[1].substring(1);
					}


					try{
						int arg = Integer.parseInt(parts[1],16);
					} catch(Exception e) {
						error.append("\nError on line " + (i+1) + ": argument is not a hex number");
						return i + 1;
					}
				}

				if(Instruction.opcodes.containsKey(parts[0].toUpperCase())) {
					if(!Instruction.opcodes.containsKey(parts[0])) {
						error.append("\nError on line " + (i+1) + ": mnemonic must be upper case");
						return i+1;
					}
				}

				if(!Instruction.opcodes.containsKey(parts[0]) && readingCode){
					error.append("\nError on line " + (i+1) + ": illegal mnemonic");
					return i+1;
				}

				if(!readingCode) {
					try {
						int address = Integer.parseInt(parts[0],16);
						int value = Integer.parseInt(parts[1],16);
					} catch(NumberFormatException e) {
						error.append("\nError on line " + (i+1) + 
								": data has non-numeric memory address");
						return i + 1;				
					}
				}

			}

		}catch(FileNotFoundException f) {
			error.append("\nUnable to open the source file");
			return -1;
		}
		catch(Exception f) {

		}

		Assembler assem = new SimpleAssembler();
		assem.assemble(inputFileName, outputFileName, error);

		return 0;
	}
	public static void main(String[] args) {
		StringBuilder error = new StringBuilder();
		System.out.println("Enter the name of the file without extension: ");
		try (Scanner keyboard = new Scanner(System.in)) { 
			String filename = keyboard.nextLine();
			int i = new FullAssembler().assemble(filename + ".pasm", 
					filename + ".pexe", error);
			System.out.println("result = " + i);
			System.out.println(error.toString());
		}

	}



}
